
import random

import xlsxwriter
from xlsxwriter.utility import xl_range

'''
Write data into the worksheet and generate plots
Args: 
    dict_results: The ordered dict structure that constains the statistics, should be generated by Stat_Parser functions
    plot_stats: The list of names of statistics to generate plots for
    worksheet_name: The name of the worksheet
    workbook: The workbook where the worksheet should be added
    y_names: map to y axis title names that desires to be changed, key is the key for that entry in the results dict, while value is the name printed
    x_names: similar to y_names for x axis
'''
def mjl_plot_stats(dict_results, plot_stats, worksheet_name, workbook, y_names, x_names):
    worksheet = workbook.add_worksheet(worksheet_name)
    row = 0
    col = 0
    len_x = 0
    len_y = 0
    to_print = False

    for title, results_title in dict_results.iteritems():
        if title in plot_stats:
            to_print = True
        if to_print:
            chart = workbook.add_chart({'type': 'column'})
            # chart.set_style(random.randint(0, 48))

        row_begin = row
        col_begin = col
        worksheet.write_string(row, col, title)

        if to_print:
            chart.set_title({'name': title})
            chart.set_x_axis({'name': 'Application'})

        row += 1
        first = True
        for y_title, y_values in results_title.iteritems():
            len_y = len(results_title)
            len_x = len(y_values)
            try:
                worksheet.write_string(row, col, y_names[y_title])
            except KeyError:
                worksheet.write_string(row, col, y_title)
            col += 1
            for x_title, x_values in y_values.iteritems():
                if first:
                    try:
                        worksheet.write_string(row_begin, col, x_names[x_title])
                    except KeyError:
                        worksheet.write_string(row_begin, col, x_title)
                try:
                    value = float(x_values)
                    worksheet.write_number(row, col, value)
                except ValueError:
                    pass
                col += 1
            if first:
                worksheet.write_string(row_begin, col, "average")
                worksheet.write_string(row_begin, col + 1, "geomean")
            worksheet.write_formula(row, col, '=AVERAGE(' + xl_range(row, col_begin + 1, row, col - 1) + ')')
            worksheet.write_formula(row, col + 1, '=GEOMEAN(' + xl_range(row, col_begin + 1, row, col - 1) + ')')

            if to_print:
                chart.add_series(
                    {
                        'name': [worksheet_name, row, col_begin],
                        'categories': [worksheet_name, row_begin, col_begin + 1, row_begin, col_begin + len_x + 2],
                        'values': [worksheet_name, row, col_begin + 1, row, col_begin + len_x + 2]
                    }
                )
            first = False
            row += 1
            col = col_begin
        if to_print:
            worksheet.insert_chart(row_begin, col_begin + len_x + 4, chart)

        row = row_begin + len_y + 2
        col = 0
        to_print = False

'''
Create a workbook with multiple worksheets, each for a set of data
Args:
    multiset_stats: The list of a set of data to be generated in the workbook, each set on a separate sheet. Each set of data should be a dict structure with the statistics under key "results", the set of statistics to plot under "plot", and the name of the worksheet under "worksheet_name"
    output_path: The filename/path of the output workbook
'''
def mjl_plot_multiset_stats(multiset_stats, output_path, y_names=dict(), x_names=dict()):
    workbook = xlsxwriter.Workbook(output_path)
    for stats in multiset_stats:
        mjl_plot_stats(stats["results"], stats["plot"], stats["worksheet_name"], workbook, y_names, x_names)
    workbook.close()
